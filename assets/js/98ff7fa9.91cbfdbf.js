"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[49],{4648:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"getting-started/development-setup","title":"Development Setup","description":"This guide will help you set up Bitcoin MCP Server for local development.","source":"@site/docs/getting-started/development-setup.md","sourceDirName":"getting-started","slug":"/getting-started/development-setup","permalink":"/bitcoin-mcp/docs/getting-started/development-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/AbdelStark/bitcoin-mcp/tree/main/docs/docs/getting-started/development-setup.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/bitcoin-mcp/docs/getting-started/installation"},"next":{"title":"Claude Desktop Integration","permalink":"/bitcoin-mcp/docs/integration/claude-desktop"}}');var s=i(4848),l=i(8453);const r={sidebar_position:2},d="Development Setup",o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setting Up the Development Environment",id:"setting-up-the-development-environment",level:2},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Running in Development Mode",id:"running-in-development-mode",level:3},{value:"Running Tests",id:"running-tests",level:3},{value:"Code Linting",id:"code-linting",level:3},{value:"Project Structure",id:"project-structure",level:2},{value:"Key Directories and Files",id:"key-directories-and-files",level:3},{value:"Development Guidelines",id:"development-guidelines",level:2},{value:"Code Style",id:"code-style",level:3},{value:"Testing",id:"testing",level:3},{value:"Documentation",id:"documentation",level:3},{value:"Git Workflow",id:"git-workflow",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Debug Logging",id:"debug-logging",level:3},{value:"Using VS Code Debugger",id:"using-vs-code-debugger",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"development-setup",children:"Development Setup"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will help you set up Bitcoin MCP Server for local development."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Node.js (v16 or higher)"}),"\n",(0,s.jsx)(n.li,{children:"npm (v7 or higher)"}),"\n",(0,s.jsx)(n.li,{children:"Git"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-the-development-environment",children:"Setting Up the Development Environment"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Clone the Repository"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/AbdelStark/bitcoin-mcp\ncd bitcoin-mcp\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Install Dependencies"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Build the Project"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,s.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,s.jsx)(n.h3,{id:"running-in-development-mode",children:"Running in Development Mode"}),"\n",(0,s.jsx)(n.p,{children:"Start the server in development mode with auto-reloading:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,s.jsx)(n.h3,{id:"running-tests",children:"Running Tests"}),"\n",(0,s.jsx)(n.p,{children:"Execute the test suite:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,s.jsx)(n.h3,{id:"code-linting",children:"Code Linting"}),"\n",(0,s.jsx)(n.p,{children:"Check code style and formatting:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run lint\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fix automatic linting issues:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run lint:fix\n"})}),"\n",(0,s.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(n.h3,{id:"key-directories-and-files",children:"Key Directories and Files"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"bitcoin-mcp/\n\u251c\u2500\u2500 src/                      # Source code\n\u2502   \u251c\u2500\u2500 bitcoin-client.ts     # Bitcoin operations\n\u2502   \u251c\u2500\u2500 sse_server.ts        # SSE transport implementation\n\u2502   \u251c\u2500\u2500 stdio_server.ts      # STDIO transport implementation\n\u2502   \u251c\u2500\u2500 index.ts            # Main entry point\n\u2502   \u2514\u2500\u2500 utils/              # Utility functions\n\u251c\u2500\u2500 tests/                   # Test files\n\u251c\u2500\u2500 docs/                    # Documentation\n\u2514\u2500\u2500 examples/                # Example usage\n"})}),"\n",(0,s.jsx)(n.h2,{id:"development-guidelines",children:"Development Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"code-style",children:"Code Style"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use TypeScript for all new code"}),"\n",(0,s.jsx)(n.li,{children:"Follow the existing code style"}),"\n",(0,s.jsx)(n.li,{children:"Add type definitions for all functions and variables"}),"\n",(0,s.jsx)(n.li,{children:"Keep functions small and focused"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write tests for all new features"}),"\n",(0,s.jsx)(n.li,{children:"Maintain existing test coverage"}),"\n",(0,s.jsx)(n.li,{children:"Use meaningful test descriptions"}),"\n",(0,s.jsx)(n.li,{children:"Test both success and error cases"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Update documentation for new features"}),"\n",(0,s.jsx)(n.li,{children:"Include JSDoc comments for public APIs"}),"\n",(0,s.jsx)(n.li,{children:"Keep the README up to date"}),"\n",(0,s.jsx)(n.li,{children:"Document breaking changes"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"git-workflow",children:"Git Workflow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a feature branch:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git checkout -b feature/your-feature-name\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Make your changes and commit:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'git add .\ngit commit -m "feat: description of your changes"\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Push your branch and create a pull request:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git push origin feature/your-feature-name\n"})}),"\n",(0,s.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,s.jsx)(n.h3,{id:"debug-logging",children:"Debug Logging"}),"\n",(0,s.jsx)(n.p,{children:"Enable debug logging by setting the environment variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"LOG_LEVEL=debug npm start\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-vs-code-debugger",children:"Using VS Code Debugger"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a launch configuration in ",(0,s.jsx)(n.code,{children:".vscode/launch.json"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "version": "0.2.0",\n  "configurations": [\n    {\n      "type": "node",\n      "request": "launch",\n      "name": "Debug Server",\n      "program": "${workspaceFolder}/dist/index.js",\n      "preLaunchTask": "npm: build",\n      "outFiles": ["${workspaceFolder}/dist/**/*.js"],\n      "env": {\n        "LOG_LEVEL": "debug",\n        "SERVER_MODE": "stdio"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Start debugging using F5 or the VS Code debug panel"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var t=i(6540);const s={},l=t.createContext(s);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);